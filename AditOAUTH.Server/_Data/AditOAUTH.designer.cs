#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AditOAUTH.Server._Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ADITOAUTH")]
	internal partial class AditOAUTHDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertoauth_client_endpoint(oauth_client_endpoint instance);
    partial void Updateoauth_client_endpoint(oauth_client_endpoint instance);
    partial void Deleteoauth_client_endpoint(oauth_client_endpoint instance);
    partial void Insertoauth_session(oauth_session instance);
    partial void Updateoauth_session(oauth_session instance);
    partial void Deleteoauth_session(oauth_session instance);
    partial void Insertoauth_client(oauth_client instance);
    partial void Updateoauth_client(oauth_client instance);
    partial void Deleteoauth_client(oauth_client instance);
    partial void Insertoauth_scope(oauth_scope instance);
    partial void Updateoauth_scope(oauth_scope instance);
    partial void Deleteoauth_scope(oauth_scope instance);
    partial void Insertoauth_session_access_token(oauth_session_access_token instance);
    partial void Updateoauth_session_access_token(oauth_session_access_token instance);
    partial void Deleteoauth_session_access_token(oauth_session_access_token instance);
    partial void Insertoauth_session_authcode_scope(oauth_session_authcode_scope instance);
    partial void Updateoauth_session_authcode_scope(oauth_session_authcode_scope instance);
    partial void Deleteoauth_session_authcode_scope(oauth_session_authcode_scope instance);
    partial void Insertoauth_session_authcode(oauth_session_authcode instance);
    partial void Updateoauth_session_authcode(oauth_session_authcode instance);
    partial void Deleteoauth_session_authcode(oauth_session_authcode instance);
    partial void Insertoauth_session_redirect(oauth_session_redirect instance);
    partial void Updateoauth_session_redirect(oauth_session_redirect instance);
    partial void Deleteoauth_session_redirect(oauth_session_redirect instance);
    partial void Insertoauth_session_refresh_token(oauth_session_refresh_token instance);
    partial void Updateoauth_session_refresh_token(oauth_session_refresh_token instance);
    partial void Deleteoauth_session_refresh_token(oauth_session_refresh_token instance);
    partial void Insertoauth_session_token_scope(oauth_session_token_scope instance);
    partial void Updateoauth_session_token_scope(oauth_session_token_scope instance);
    partial void Deleteoauth_session_token_scope(oauth_session_token_scope instance);
    #endregion
		
		
		internal AditOAUTHDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<oauth_client_endpoint> oauth_client_endpoints
		{
			get
			{
				return this.GetTable<oauth_client_endpoint>();
			}
		}
		
		internal System.Data.Linq.Table<oauth_session> oauth_sessions
		{
			get
			{
				return this.GetTable<oauth_session>();
			}
		}
		
		internal System.Data.Linq.Table<oauth_client> oauth_clients
		{
			get
			{
				return this.GetTable<oauth_client>();
			}
		}
		
		internal System.Data.Linq.Table<oauth_scope> oauth_scopes
		{
			get
			{
				return this.GetTable<oauth_scope>();
			}
		}
		
		internal System.Data.Linq.Table<oauth_session_access_token> oauth_session_access_tokens
		{
			get
			{
				return this.GetTable<oauth_session_access_token>();
			}
		}
		
		internal System.Data.Linq.Table<oauth_session_authcode_scope> oauth_session_authcode_scopes
		{
			get
			{
				return this.GetTable<oauth_session_authcode_scope>();
			}
		}
		
		internal System.Data.Linq.Table<oauth_session_authcode> oauth_session_authcodes
		{
			get
			{
				return this.GetTable<oauth_session_authcode>();
			}
		}
		
		internal System.Data.Linq.Table<oauth_session_redirect> oauth_session_redirects
		{
			get
			{
				return this.GetTable<oauth_session_redirect>();
			}
		}
		
		internal System.Data.Linq.Table<oauth_session_refresh_token> oauth_session_refresh_tokens
		{
			get
			{
				return this.GetTable<oauth_session_refresh_token>();
			}
		}
		
		internal System.Data.Linq.Table<oauth_session_token_scope> oauth_session_token_scopes
		{
			get
			{
				return this.GetTable<oauth_session_token_scope>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.oauth_client_endpoints")]
	internal partial class oauth_client_endpoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _client_id;
		
		private string _uri_protocol;
		
		private string _uri_domain;
		
		private System.Nullable<int> _uri_port;
		
		private string _uri_path;
		
		private EntityRef<oauth_client> _oauth_client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onclient_idChanging(string value);
    partial void Onclient_idChanged();
    partial void Onuri_protocolChanging(string value);
    partial void Onuri_protocolChanged();
    partial void Onuri_domainChanging(string value);
    partial void Onuri_domainChanged();
    partial void Onuri_portChanging(System.Nullable<int> value);
    partial void Onuri_portChanged();
    partial void Onuri_pathChanging(string value);
    partial void Onuri_pathChanged();
    #endregion
		
		internal oauth_client_endpoint()
		{
			this._oauth_client = default(EntityRef<oauth_client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		internal int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_client_id", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		internal string client_id
		{
			get
			{
				return this._client_id;
			}
			set
			{
				if ((this._client_id != value))
				{
					if (this._oauth_client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onclient_idChanging(value);
					this.SendPropertyChanging();
					this._client_id = value;
					this.SendPropertyChanged("client_id");
					this.Onclient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uri_protocol", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		internal string uri_protocol
		{
			get
			{
				return this._uri_protocol;
			}
			set
			{
				if ((this._uri_protocol != value))
				{
					this.Onuri_protocolChanging(value);
					this.SendPropertyChanging();
					this._uri_protocol = value;
					this.SendPropertyChanged("uri_protocol");
					this.Onuri_protocolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uri_domain", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		internal string uri_domain
		{
			get
			{
				return this._uri_domain;
			}
			set
			{
				if ((this._uri_domain != value))
				{
					this.Onuri_domainChanging(value);
					this.SendPropertyChanging();
					this._uri_domain = value;
					this.SendPropertyChanged("uri_domain");
					this.Onuri_domainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uri_port", DbType="Int")]
		internal System.Nullable<int> uri_port
		{
			get
			{
				return this._uri_port;
			}
			set
			{
				if ((this._uri_port != value))
				{
					this.Onuri_portChanging(value);
					this.SendPropertyChanging();
					this._uri_port = value;
					this.SendPropertyChanged("uri_port");
					this.Onuri_portChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uri_path", DbType="NVarChar(MAX)")]
		internal string uri_path
		{
			get
			{
				return this._uri_path;
			}
			set
			{
				if ((this._uri_path != value))
				{
					this.Onuri_pathChanging(value);
					this.SendPropertyChanging();
					this._uri_path = value;
					this.SendPropertyChanged("uri_path");
					this.Onuri_pathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_client_oauth_client_endpoint", Storage="_oauth_client", ThisKey="client_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal oauth_client oauth_client
		{
			get
			{
				return this._oauth_client.Entity;
			}
			set
			{
				oauth_client previousValue = this._oauth_client.Entity;
				if (((previousValue != value) 
							|| (this._oauth_client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_client.Entity = null;
						previousValue.oauth_client_endpoints.Remove(this);
					}
					this._oauth_client.Entity = value;
					if ((value != null))
					{
						value.oauth_client_endpoints.Add(this);
						this._client_id = value.id;
					}
					else
					{
						this._client_id = default(string);
					}
					this.SendPropertyChanged("oauth_client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.oauth_sessions")]
	internal partial class oauth_session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _client_id;
		
		private string _owner_type;
		
		private string _owner_id;
		
		private EntitySet<oauth_session_access_token> _oauth_session_access_tokens;
		
		private EntitySet<oauth_session_authcode> _oauth_session_authcodes;
		
		private EntityRef<oauth_session_redirect> _oauth_session_redirect;
		
		private EntityRef<oauth_client> _oauth_client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onclient_idChanging(string value);
    partial void Onclient_idChanged();
    partial void Onowner_typeChanging(string value);
    partial void Onowner_typeChanged();
    partial void Onowner_idChanging(string value);
    partial void Onowner_idChanged();
    #endregion
		
		internal oauth_session()
		{
			this._oauth_session_access_tokens = new EntitySet<oauth_session_access_token>(new Action<oauth_session_access_token>(this.attach_oauth_session_access_tokens), new Action<oauth_session_access_token>(this.detach_oauth_session_access_tokens));
			this._oauth_session_authcodes = new EntitySet<oauth_session_authcode>(new Action<oauth_session_authcode>(this.attach_oauth_session_authcodes), new Action<oauth_session_authcode>(this.detach_oauth_session_authcodes));
			this._oauth_session_redirect = default(EntityRef<oauth_session_redirect>);
			this._oauth_client = default(EntityRef<oauth_client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		internal int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_client_id", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		internal string client_id
		{
			get
			{
				return this._client_id;
			}
			set
			{
				if ((this._client_id != value))
				{
					if (this._oauth_client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onclient_idChanging(value);
					this.SendPropertyChanging();
					this._client_id = value;
					this.SendPropertyChanged("client_id");
					this.Onclient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_type", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		internal string owner_type
		{
			get
			{
				return this._owner_type;
			}
			set
			{
				if ((this._owner_type != value))
				{
					this.Onowner_typeChanging(value);
					this.SendPropertyChanging();
					this._owner_type = value;
					this.SendPropertyChanged("owner_type");
					this.Onowner_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_id", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		internal string owner_id
		{
			get
			{
				return this._owner_id;
			}
			set
			{
				if ((this._owner_id != value))
				{
					this.Onowner_idChanging(value);
					this.SendPropertyChanging();
					this._owner_id = value;
					this.SendPropertyChanged("owner_id");
					this.Onowner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_oauth_session_access_token", Storage="_oauth_session_access_tokens", ThisKey="id", OtherKey="session_id")]
		internal EntitySet<oauth_session_access_token> oauth_session_access_tokens
		{
			get
			{
				return this._oauth_session_access_tokens;
			}
			set
			{
				this._oauth_session_access_tokens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_oauth_session_authcode", Storage="_oauth_session_authcodes", ThisKey="id", OtherKey="session_id")]
		internal EntitySet<oauth_session_authcode> oauth_session_authcodes
		{
			get
			{
				return this._oauth_session_authcodes;
			}
			set
			{
				this._oauth_session_authcodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_oauth_session_redirect", Storage="_oauth_session_redirect", ThisKey="id", OtherKey="session_id", IsUnique=true, IsForeignKey=false)]
		internal oauth_session_redirect oauth_session_redirect
		{
			get
			{
				return this._oauth_session_redirect.Entity;
			}
			set
			{
				oauth_session_redirect previousValue = this._oauth_session_redirect.Entity;
				if (((previousValue != value) 
							|| (this._oauth_session_redirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_session_redirect.Entity = null;
						previousValue.oauth_session = null;
					}
					this._oauth_session_redirect.Entity = value;
					if ((value != null))
					{
						value.oauth_session = this;
					}
					this.SendPropertyChanged("oauth_session_redirect");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_client_oauth_session", Storage="_oauth_client", ThisKey="client_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal oauth_client oauth_client
		{
			get
			{
				return this._oauth_client.Entity;
			}
			set
			{
				oauth_client previousValue = this._oauth_client.Entity;
				if (((previousValue != value) 
							|| (this._oauth_client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_client.Entity = null;
						previousValue.oauth_sessions.Remove(this);
					}
					this._oauth_client.Entity = value;
					if ((value != null))
					{
						value.oauth_sessions.Add(this);
						this._client_id = value.id;
					}
					else
					{
						this._client_id = default(string);
					}
					this.SendPropertyChanged("oauth_client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_oauth_session_access_tokens(oauth_session_access_token entity)
		{
			this.SendPropertyChanging();
			entity.oauth_session = this;
		}
		
		private void detach_oauth_session_access_tokens(oauth_session_access_token entity)
		{
			this.SendPropertyChanging();
			entity.oauth_session = null;
		}
		
		private void attach_oauth_session_authcodes(oauth_session_authcode entity)
		{
			this.SendPropertyChanging();
			entity.oauth_session = this;
		}
		
		private void detach_oauth_session_authcodes(oauth_session_authcode entity)
		{
			this.SendPropertyChanging();
			entity.oauth_session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.oauth_clients")]
	internal partial class oauth_client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _secret;
		
		private string _name;
		
		private bool _auto_approve;
		
		private EntitySet<oauth_client_endpoint> _oauth_client_endpoints;
		
		private EntitySet<oauth_session> _oauth_sessions;
		
		private EntitySet<oauth_session_refresh_token> _oauth_session_refresh_tokens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnsecretChanging(string value);
    partial void OnsecretChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onauto_approveChanging(bool value);
    partial void Onauto_approveChanged();
    #endregion
		
		internal oauth_client()
		{
			this._oauth_client_endpoints = new EntitySet<oauth_client_endpoint>(new Action<oauth_client_endpoint>(this.attach_oauth_client_endpoints), new Action<oauth_client_endpoint>(this.detach_oauth_client_endpoints));
			this._oauth_sessions = new EntitySet<oauth_session>(new Action<oauth_session>(this.attach_oauth_sessions), new Action<oauth_session>(this.detach_oauth_sessions));
			this._oauth_session_refresh_tokens = new EntitySet<oauth_session_refresh_token>(new Action<oauth_session_refresh_token>(this.attach_oauth_session_refresh_tokens), new Action<oauth_session_refresh_token>(this.detach_oauth_session_refresh_tokens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="NVarChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		internal string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secret", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		internal string secret
		{
			get
			{
				return this._secret;
			}
			set
			{
				if ((this._secret != value))
				{
					this.OnsecretChanging(value);
					this.SendPropertyChanging();
					this._secret = value;
					this.SendPropertyChanged("secret");
					this.OnsecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		internal string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_auto_approve", DbType="Bit NOT NULL")]
		internal bool auto_approve
		{
			get
			{
				return this._auto_approve;
			}
			set
			{
				if ((this._auto_approve != value))
				{
					this.Onauto_approveChanging(value);
					this.SendPropertyChanging();
					this._auto_approve = value;
					this.SendPropertyChanged("auto_approve");
					this.Onauto_approveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_client_oauth_client_endpoint", Storage="_oauth_client_endpoints", ThisKey="id", OtherKey="client_id")]
		internal EntitySet<oauth_client_endpoint> oauth_client_endpoints
		{
			get
			{
				return this._oauth_client_endpoints;
			}
			set
			{
				this._oauth_client_endpoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_client_oauth_session", Storage="_oauth_sessions", ThisKey="id", OtherKey="client_id")]
		internal EntitySet<oauth_session> oauth_sessions
		{
			get
			{
				return this._oauth_sessions;
			}
			set
			{
				this._oauth_sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_client_oauth_session_refresh_token", Storage="_oauth_session_refresh_tokens", ThisKey="id", OtherKey="client_id")]
		internal EntitySet<oauth_session_refresh_token> oauth_session_refresh_tokens
		{
			get
			{
				return this._oauth_session_refresh_tokens;
			}
			set
			{
				this._oauth_session_refresh_tokens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_oauth_client_endpoints(oauth_client_endpoint entity)
		{
			this.SendPropertyChanging();
			entity.oauth_client = this;
		}
		
		private void detach_oauth_client_endpoints(oauth_client_endpoint entity)
		{
			this.SendPropertyChanging();
			entity.oauth_client = null;
		}
		
		private void attach_oauth_sessions(oauth_session entity)
		{
			this.SendPropertyChanging();
			entity.oauth_client = this;
		}
		
		private void detach_oauth_sessions(oauth_session entity)
		{
			this.SendPropertyChanging();
			entity.oauth_client = null;
		}
		
		private void attach_oauth_session_refresh_tokens(oauth_session_refresh_token entity)
		{
			this.SendPropertyChanging();
			entity.oauth_client = this;
		}
		
		private void detach_oauth_session_refresh_tokens(oauth_session_refresh_token entity)
		{
			this.SendPropertyChanging();
			entity.oauth_client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.oauth_scopes")]
	internal partial class oauth_scope : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _scope;
		
		private string _name;
		
		private string _description;
		
		private EntitySet<oauth_session_authcode_scope> _oauth_session_authcode_scopes;
		
		private EntitySet<oauth_session_token_scope> _oauth_session_token_scopes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnscopeChanging(string value);
    partial void OnscopeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		internal oauth_scope()
		{
			this._oauth_session_authcode_scopes = new EntitySet<oauth_session_authcode_scope>(new Action<oauth_session_authcode_scope>(this.attach_oauth_session_authcode_scopes), new Action<oauth_session_authcode_scope>(this.detach_oauth_session_authcode_scopes));
			this._oauth_session_token_scopes = new EntitySet<oauth_session_token_scope>(new Action<oauth_session_token_scope>(this.attach_oauth_session_token_scopes), new Action<oauth_session_token_scope>(this.detach_oauth_session_token_scopes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		internal int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scope", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		internal string scope
		{
			get
			{
				return this._scope;
			}
			set
			{
				if ((this._scope != value))
				{
					this.OnscopeChanging(value);
					this.SendPropertyChanging();
					this._scope = value;
					this.SendPropertyChanged("scope");
					this.OnscopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		internal string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		internal string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_scope_oauth_session_authcode_scope", Storage="_oauth_session_authcode_scopes", ThisKey="id", OtherKey="scope_id")]
		internal EntitySet<oauth_session_authcode_scope> oauth_session_authcode_scopes
		{
			get
			{
				return this._oauth_session_authcode_scopes;
			}
			set
			{
				this._oauth_session_authcode_scopes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_scope_oauth_session_token_scope", Storage="_oauth_session_token_scopes", ThisKey="id", OtherKey="scope_id")]
		internal EntitySet<oauth_session_token_scope> oauth_session_token_scopes
		{
			get
			{
				return this._oauth_session_token_scopes;
			}
			set
			{
				this._oauth_session_token_scopes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_oauth_session_authcode_scopes(oauth_session_authcode_scope entity)
		{
			this.SendPropertyChanging();
			entity.oauth_scope = this;
		}
		
		private void detach_oauth_session_authcode_scopes(oauth_session_authcode_scope entity)
		{
			this.SendPropertyChanging();
			entity.oauth_scope = null;
		}
		
		private void attach_oauth_session_token_scopes(oauth_session_token_scope entity)
		{
			this.SendPropertyChanging();
			entity.oauth_scope = this;
		}
		
		private void detach_oauth_session_token_scopes(oauth_session_token_scope entity)
		{
			this.SendPropertyChanging();
			entity.oauth_scope = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.oauth_session_access_tokens")]
	internal partial class oauth_session_access_token : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _session_id;
		
		private string _access_token;
		
		private System.DateTime _access_token_expires;
		
		private EntityRef<oauth_session_refresh_token> _oauth_session_refresh_token;
		
		private EntitySet<oauth_session_token_scope> _oauth_session_token_scopes;
		
		private EntityRef<oauth_session> _oauth_session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onsession_idChanging(int value);
    partial void Onsession_idChanged();
    partial void Onaccess_tokenChanging(string value);
    partial void Onaccess_tokenChanged();
    partial void Onaccess_token_expiresChanging(System.DateTime value);
    partial void Onaccess_token_expiresChanged();
    #endregion
		
		internal oauth_session_access_token()
		{
			this._oauth_session_refresh_token = default(EntityRef<oauth_session_refresh_token>);
			this._oauth_session_token_scopes = new EntitySet<oauth_session_token_scope>(new Action<oauth_session_token_scope>(this.attach_oauth_session_token_scopes), new Action<oauth_session_token_scope>(this.detach_oauth_session_token_scopes));
			this._oauth_session = default(EntityRef<oauth_session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		internal int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_session_id", DbType="Int NOT NULL")]
		internal int session_id
		{
			get
			{
				return this._session_id;
			}
			set
			{
				if ((this._session_id != value))
				{
					if (this._oauth_session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsession_idChanging(value);
					this.SendPropertyChanging();
					this._session_id = value;
					this.SendPropertyChanged("session_id");
					this.Onsession_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_access_token", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		internal string access_token
		{
			get
			{
				return this._access_token;
			}
			set
			{
				if ((this._access_token != value))
				{
					this.Onaccess_tokenChanging(value);
					this.SendPropertyChanging();
					this._access_token = value;
					this.SendPropertyChanged("access_token");
					this.Onaccess_tokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_access_token_expires", DbType="DateTime NOT NULL")]
		internal System.DateTime access_token_expires
		{
			get
			{
				return this._access_token_expires;
			}
			set
			{
				if ((this._access_token_expires != value))
				{
					this.Onaccess_token_expiresChanging(value);
					this.SendPropertyChanging();
					this._access_token_expires = value;
					this.SendPropertyChanged("access_token_expires");
					this.Onaccess_token_expiresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_access_token_oauth_session_refresh_token", Storage="_oauth_session_refresh_token", ThisKey="id", OtherKey="session_access_token_id", IsUnique=true, IsForeignKey=false)]
		internal oauth_session_refresh_token oauth_session_refresh_token
		{
			get
			{
				return this._oauth_session_refresh_token.Entity;
			}
			set
			{
				oauth_session_refresh_token previousValue = this._oauth_session_refresh_token.Entity;
				if (((previousValue != value) 
							|| (this._oauth_session_refresh_token.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_session_refresh_token.Entity = null;
						previousValue.oauth_session_access_token = null;
					}
					this._oauth_session_refresh_token.Entity = value;
					if ((value != null))
					{
						value.oauth_session_access_token = this;
					}
					this.SendPropertyChanged("oauth_session_refresh_token");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_access_token_oauth_session_token_scope", Storage="_oauth_session_token_scopes", ThisKey="id", OtherKey="session_access_token_id")]
		internal EntitySet<oauth_session_token_scope> oauth_session_token_scopes
		{
			get
			{
				return this._oauth_session_token_scopes;
			}
			set
			{
				this._oauth_session_token_scopes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_oauth_session_access_token", Storage="_oauth_session", ThisKey="session_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal oauth_session oauth_session
		{
			get
			{
				return this._oauth_session.Entity;
			}
			set
			{
				oauth_session previousValue = this._oauth_session.Entity;
				if (((previousValue != value) 
							|| (this._oauth_session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_session.Entity = null;
						previousValue.oauth_session_access_tokens.Remove(this);
					}
					this._oauth_session.Entity = value;
					if ((value != null))
					{
						value.oauth_session_access_tokens.Add(this);
						this._session_id = value.id;
					}
					else
					{
						this._session_id = default(int);
					}
					this.SendPropertyChanged("oauth_session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_oauth_session_token_scopes(oauth_session_token_scope entity)
		{
			this.SendPropertyChanging();
			entity.oauth_session_access_token = this;
		}
		
		private void detach_oauth_session_token_scopes(oauth_session_token_scope entity)
		{
			this.SendPropertyChanging();
			entity.oauth_session_access_token = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.oauth_session_authcode_scopes")]
	internal partial class oauth_session_authcode_scope : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _oauth_session_authcode_id;
		
		private int _scope_id;
		
		private EntityRef<oauth_scope> _oauth_scope;
		
		private EntityRef<oauth_session_authcode> _oauth_session_authcode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onoauth_session_authcode_idChanging(int value);
    partial void Onoauth_session_authcode_idChanged();
    partial void Onscope_idChanging(int value);
    partial void Onscope_idChanged();
    #endregion
		
		internal oauth_session_authcode_scope()
		{
			this._oauth_scope = default(EntityRef<oauth_scope>);
			this._oauth_session_authcode = default(EntityRef<oauth_session_authcode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oauth_session_authcode_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		internal int oauth_session_authcode_id
		{
			get
			{
				return this._oauth_session_authcode_id;
			}
			set
			{
				if ((this._oauth_session_authcode_id != value))
				{
					if (this._oauth_session_authcode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onoauth_session_authcode_idChanging(value);
					this.SendPropertyChanging();
					this._oauth_session_authcode_id = value;
					this.SendPropertyChanged("oauth_session_authcode_id");
					this.Onoauth_session_authcode_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scope_id", DbType="Int NOT NULL")]
		internal int scope_id
		{
			get
			{
				return this._scope_id;
			}
			set
			{
				if ((this._scope_id != value))
				{
					if (this._oauth_scope.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onscope_idChanging(value);
					this.SendPropertyChanging();
					this._scope_id = value;
					this.SendPropertyChanged("scope_id");
					this.Onscope_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_scope_oauth_session_authcode_scope", Storage="_oauth_scope", ThisKey="scope_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal oauth_scope oauth_scope
		{
			get
			{
				return this._oauth_scope.Entity;
			}
			set
			{
				oauth_scope previousValue = this._oauth_scope.Entity;
				if (((previousValue != value) 
							|| (this._oauth_scope.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_scope.Entity = null;
						previousValue.oauth_session_authcode_scopes.Remove(this);
					}
					this._oauth_scope.Entity = value;
					if ((value != null))
					{
						value.oauth_session_authcode_scopes.Add(this);
						this._scope_id = value.id;
					}
					else
					{
						this._scope_id = default(int);
					}
					this.SendPropertyChanged("oauth_scope");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_authcode_oauth_session_authcode_scope", Storage="_oauth_session_authcode", ThisKey="oauth_session_authcode_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal oauth_session_authcode oauth_session_authcode
		{
			get
			{
				return this._oauth_session_authcode.Entity;
			}
			set
			{
				oauth_session_authcode previousValue = this._oauth_session_authcode.Entity;
				if (((previousValue != value) 
							|| (this._oauth_session_authcode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_session_authcode.Entity = null;
						previousValue.oauth_session_authcode_scope = null;
					}
					this._oauth_session_authcode.Entity = value;
					if ((value != null))
					{
						value.oauth_session_authcode_scope = this;
						this._oauth_session_authcode_id = value.id;
					}
					else
					{
						this._oauth_session_authcode_id = default(int);
					}
					this.SendPropertyChanged("oauth_session_authcode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.oauth_session_authcodes")]
	internal partial class oauth_session_authcode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _session_id;
		
		private string _auth_code;
		
		private System.DateTime _auth_code_expires;
		
		private EntityRef<oauth_session_authcode_scope> _oauth_session_authcode_scope;
		
		private EntityRef<oauth_session> _oauth_session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onsession_idChanging(int value);
    partial void Onsession_idChanged();
    partial void Onauth_codeChanging(string value);
    partial void Onauth_codeChanged();
    partial void Onauth_code_expiresChanging(System.DateTime value);
    partial void Onauth_code_expiresChanged();
    #endregion
		
		internal oauth_session_authcode()
		{
			this._oauth_session_authcode_scope = default(EntityRef<oauth_session_authcode_scope>);
			this._oauth_session = default(EntityRef<oauth_session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		internal int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_session_id", DbType="Int NOT NULL")]
		internal int session_id
		{
			get
			{
				return this._session_id;
			}
			set
			{
				if ((this._session_id != value))
				{
					if (this._oauth_session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsession_idChanging(value);
					this.SendPropertyChanging();
					this._session_id = value;
					this.SendPropertyChanged("session_id");
					this.Onsession_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_auth_code", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		internal string auth_code
		{
			get
			{
				return this._auth_code;
			}
			set
			{
				if ((this._auth_code != value))
				{
					this.Onauth_codeChanging(value);
					this.SendPropertyChanging();
					this._auth_code = value;
					this.SendPropertyChanged("auth_code");
					this.Onauth_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_auth_code_expires", DbType="DateTime NOT NULL")]
		internal System.DateTime auth_code_expires
		{
			get
			{
				return this._auth_code_expires;
			}
			set
			{
				if ((this._auth_code_expires != value))
				{
					this.Onauth_code_expiresChanging(value);
					this.SendPropertyChanging();
					this._auth_code_expires = value;
					this.SendPropertyChanged("auth_code_expires");
					this.Onauth_code_expiresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_authcode_oauth_session_authcode_scope", Storage="_oauth_session_authcode_scope", ThisKey="id", OtherKey="oauth_session_authcode_id", IsUnique=true, IsForeignKey=false)]
		internal oauth_session_authcode_scope oauth_session_authcode_scope
		{
			get
			{
				return this._oauth_session_authcode_scope.Entity;
			}
			set
			{
				oauth_session_authcode_scope previousValue = this._oauth_session_authcode_scope.Entity;
				if (((previousValue != value) 
							|| (this._oauth_session_authcode_scope.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_session_authcode_scope.Entity = null;
						previousValue.oauth_session_authcode = null;
					}
					this._oauth_session_authcode_scope.Entity = value;
					if ((value != null))
					{
						value.oauth_session_authcode = this;
					}
					this.SendPropertyChanged("oauth_session_authcode_scope");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_oauth_session_authcode", Storage="_oauth_session", ThisKey="session_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal oauth_session oauth_session
		{
			get
			{
				return this._oauth_session.Entity;
			}
			set
			{
				oauth_session previousValue = this._oauth_session.Entity;
				if (((previousValue != value) 
							|| (this._oauth_session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_session.Entity = null;
						previousValue.oauth_session_authcodes.Remove(this);
					}
					this._oauth_session.Entity = value;
					if ((value != null))
					{
						value.oauth_session_authcodes.Add(this);
						this._session_id = value.id;
					}
					else
					{
						this._session_id = default(int);
					}
					this.SendPropertyChanged("oauth_session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.oauth_session_redirects")]
	internal partial class oauth_session_redirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _session_id;
		
		private string _redirect_uri;
		
		private EntityRef<oauth_session> _oauth_session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsession_idChanging(int value);
    partial void Onsession_idChanged();
    partial void Onredirect_uriChanging(string value);
    partial void Onredirect_uriChanged();
    #endregion
		
		internal oauth_session_redirect()
		{
			this._oauth_session = default(EntityRef<oauth_session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_session_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		internal int session_id
		{
			get
			{
				return this._session_id;
			}
			set
			{
				if ((this._session_id != value))
				{
					if (this._oauth_session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsession_idChanging(value);
					this.SendPropertyChanging();
					this._session_id = value;
					this.SendPropertyChanged("session_id");
					this.Onsession_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_redirect_uri", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		internal string redirect_uri
		{
			get
			{
				return this._redirect_uri;
			}
			set
			{
				if ((this._redirect_uri != value))
				{
					this.Onredirect_uriChanging(value);
					this.SendPropertyChanging();
					this._redirect_uri = value;
					this.SendPropertyChanged("redirect_uri");
					this.Onredirect_uriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_oauth_session_redirect", Storage="_oauth_session", ThisKey="session_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal oauth_session oauth_session
		{
			get
			{
				return this._oauth_session.Entity;
			}
			set
			{
				oauth_session previousValue = this._oauth_session.Entity;
				if (((previousValue != value) 
							|| (this._oauth_session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_session.Entity = null;
						previousValue.oauth_session_redirect = null;
					}
					this._oauth_session.Entity = value;
					if ((value != null))
					{
						value.oauth_session_redirect = this;
						this._session_id = value.id;
					}
					else
					{
						this._session_id = default(int);
					}
					this.SendPropertyChanged("oauth_session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.oauth_session_refresh_tokens")]
	internal partial class oauth_session_refresh_token : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _session_access_token_id;
		
		private string _refresh_token;
		
		private System.DateTime _refresh_token_expires;
		
		private string _client_id;
		
		private EntityRef<oauth_client> _oauth_client;
		
		private EntityRef<oauth_session_access_token> _oauth_session_access_token;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsession_access_token_idChanging(int value);
    partial void Onsession_access_token_idChanged();
    partial void Onrefresh_tokenChanging(string value);
    partial void Onrefresh_tokenChanged();
    partial void Onrefresh_token_expiresChanging(System.DateTime value);
    partial void Onrefresh_token_expiresChanged();
    partial void Onclient_idChanging(string value);
    partial void Onclient_idChanged();
    #endregion
		
		internal oauth_session_refresh_token()
		{
			this._oauth_client = default(EntityRef<oauth_client>);
			this._oauth_session_access_token = default(EntityRef<oauth_session_access_token>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_session_access_token_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		internal int session_access_token_id
		{
			get
			{
				return this._session_access_token_id;
			}
			set
			{
				if ((this._session_access_token_id != value))
				{
					if (this._oauth_session_access_token.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsession_access_token_idChanging(value);
					this.SendPropertyChanging();
					this._session_access_token_id = value;
					this.SendPropertyChanged("session_access_token_id");
					this.Onsession_access_token_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_refresh_token", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		internal string refresh_token
		{
			get
			{
				return this._refresh_token;
			}
			set
			{
				if ((this._refresh_token != value))
				{
					this.Onrefresh_tokenChanging(value);
					this.SendPropertyChanging();
					this._refresh_token = value;
					this.SendPropertyChanged("refresh_token");
					this.Onrefresh_tokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_refresh_token_expires", DbType="DateTime NOT NULL")]
		internal System.DateTime refresh_token_expires
		{
			get
			{
				return this._refresh_token_expires;
			}
			set
			{
				if ((this._refresh_token_expires != value))
				{
					this.Onrefresh_token_expiresChanging(value);
					this.SendPropertyChanging();
					this._refresh_token_expires = value;
					this.SendPropertyChanged("refresh_token_expires");
					this.Onrefresh_token_expiresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_client_id", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		internal string client_id
		{
			get
			{
				return this._client_id;
			}
			set
			{
				if ((this._client_id != value))
				{
					if (this._oauth_client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onclient_idChanging(value);
					this.SendPropertyChanging();
					this._client_id = value;
					this.SendPropertyChanged("client_id");
					this.Onclient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_client_oauth_session_refresh_token", Storage="_oauth_client", ThisKey="client_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal oauth_client oauth_client
		{
			get
			{
				return this._oauth_client.Entity;
			}
			set
			{
				oauth_client previousValue = this._oauth_client.Entity;
				if (((previousValue != value) 
							|| (this._oauth_client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_client.Entity = null;
						previousValue.oauth_session_refresh_tokens.Remove(this);
					}
					this._oauth_client.Entity = value;
					if ((value != null))
					{
						value.oauth_session_refresh_tokens.Add(this);
						this._client_id = value.id;
					}
					else
					{
						this._client_id = default(string);
					}
					this.SendPropertyChanged("oauth_client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_access_token_oauth_session_refresh_token", Storage="_oauth_session_access_token", ThisKey="session_access_token_id", OtherKey="id", IsForeignKey=true)]
		internal oauth_session_access_token oauth_session_access_token
		{
			get
			{
				return this._oauth_session_access_token.Entity;
			}
			set
			{
				oauth_session_access_token previousValue = this._oauth_session_access_token.Entity;
				if (((previousValue != value) 
							|| (this._oauth_session_access_token.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_session_access_token.Entity = null;
						previousValue.oauth_session_refresh_token = null;
					}
					this._oauth_session_access_token.Entity = value;
					if ((value != null))
					{
						value.oauth_session_refresh_token = this;
						this._session_access_token_id = value.id;
					}
					else
					{
						this._session_access_token_id = default(int);
					}
					this.SendPropertyChanged("oauth_session_access_token");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.oauth_session_token_scopes")]
	internal partial class oauth_session_token_scope : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _session_access_token_id;
		
		private int _scope_id;
		
		private EntityRef<oauth_scope> _oauth_scope;
		
		private EntityRef<oauth_session_access_token> _oauth_session_access_token;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onsession_access_token_idChanging(System.Nullable<int> value);
    partial void Onsession_access_token_idChanged();
    partial void Onscope_idChanging(int value);
    partial void Onscope_idChanged();
    #endregion
		
		internal oauth_session_token_scope()
		{
			this._oauth_scope = default(EntityRef<oauth_scope>);
			this._oauth_session_access_token = default(EntityRef<oauth_session_access_token>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		internal int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_session_access_token_id", DbType="Int")]
		internal System.Nullable<int> session_access_token_id
		{
			get
			{
				return this._session_access_token_id;
			}
			set
			{
				if ((this._session_access_token_id != value))
				{
					if (this._oauth_session_access_token.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsession_access_token_idChanging(value);
					this.SendPropertyChanging();
					this._session_access_token_id = value;
					this.SendPropertyChanged("session_access_token_id");
					this.Onsession_access_token_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scope_id", DbType="Int NOT NULL")]
		internal int scope_id
		{
			get
			{
				return this._scope_id;
			}
			set
			{
				if ((this._scope_id != value))
				{
					if (this._oauth_scope.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onscope_idChanging(value);
					this.SendPropertyChanging();
					this._scope_id = value;
					this.SendPropertyChanged("scope_id");
					this.Onscope_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_scope_oauth_session_token_scope", Storage="_oauth_scope", ThisKey="scope_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal oauth_scope oauth_scope
		{
			get
			{
				return this._oauth_scope.Entity;
			}
			set
			{
				oauth_scope previousValue = this._oauth_scope.Entity;
				if (((previousValue != value) 
							|| (this._oauth_scope.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_scope.Entity = null;
						previousValue.oauth_session_token_scopes.Remove(this);
					}
					this._oauth_scope.Entity = value;
					if ((value != null))
					{
						value.oauth_session_token_scopes.Add(this);
						this._scope_id = value.id;
					}
					else
					{
						this._scope_id = default(int);
					}
					this.SendPropertyChanged("oauth_scope");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="oauth_session_access_token_oauth_session_token_scope", Storage="_oauth_session_access_token", ThisKey="session_access_token_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		internal oauth_session_access_token oauth_session_access_token
		{
			get
			{
				return this._oauth_session_access_token.Entity;
			}
			set
			{
				oauth_session_access_token previousValue = this._oauth_session_access_token.Entity;
				if (((previousValue != value) 
							|| (this._oauth_session_access_token.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._oauth_session_access_token.Entity = null;
						previousValue.oauth_session_token_scopes.Remove(this);
					}
					this._oauth_session_access_token.Entity = value;
					if ((value != null))
					{
						value.oauth_session_token_scopes.Add(this);
						this._session_access_token_id = value.id;
					}
					else
					{
						this._session_access_token_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("oauth_session_access_token");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
